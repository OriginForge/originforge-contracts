{
  "address": "0xEE89a075A003c47234287d30bEce79A660d7733d",
  "abi": [
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payAmount",
          "type": "uint256"
        }
      ],
      "name": "itemBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "payAmount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reFundAmount",
          "type": "uint256"
        }
      ],
      "name": "reFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6da16f90dd1b6d0820303230eb82076dddf8aec525607660dac71f14949af5ba",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x78D851386840d7F70A68F2fBa538f54EBE2A5d8E",
    "contractAddress": null,
    "transactionIndex": 8,
    "gasUsed": "732730",
    "logsBloom": "0x
    "blockHash": "0x4f4e71fe6f24f58340aa4a2a2cecdd6fe7314f81d4b8104c65c3772379ff7864",
    "transactionHash": "0x6da16f90dd1b6d0820303230eb82076dddf8aec525607660dac71f14949af5ba",
    "logs": [],
    "blockNumber": 156096169,
    "cumulativeGasUsed": "1982618",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 15,
  "solcInputHash": "4b10b8c271bf31e7e3ae429fd3a16fe9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"}],\"name\":\"itemBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reFundAmount\",\"type\":\"uint256\"}],\"name\":\"reFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/openforge/paymentFacet.sol\":\"PaymentFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/openforge/paymentFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage} from \\\"../shared/storage/structs/AppStorage.sol\\\";\\nimport {IPoolRouter} from \\\"../shared/interfaces/IPoolRouter.sol\\\";\\nimport {LibMeta} from \\\"../shared/libraries/LibMeta.sol\\\";\\nimport {IERC20} from \\\"../shared/interfaces/IERC20.sol\\\";\\nimport {IERC1155} from \\\"../shared/interfaces/IERC1155.sol\\\";\\n//\\n//\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract PaymentFacet is ReentrancyGuard {\\n    AppStorage internal s;\\n\\n    // payable \\ud544\\uc694 \\uc5c6\\ub098?\\n    function pay(uint payAmount) external payable returns (uint, uint) {\\n        require(payAmount > 0.1 ether, \\\"LibPayment: payAmount too low\\\");\\n\\n        // pangearouter\\n        IPoolRouter poolRouter = IPoolRouter(s.contracts[\\\"pangearouter\\\"]);\\n\\n        payable(address(this)).transfer(payAmount);\\n        IPoolRouter.ExactInputSingleParams memory params = IPoolRouter\\n            .ExactInputSingleParams({\\n                tokenIn: address(0),\\n                amountIn: payAmount,\\n                amountOutMinimum: 1000,\\n                pool: s.contracts[\\\"gcpool\\\"],\\n                to: s.contracts[\\\"bank\\\"],\\n                unwrap: false\\n            });\\n\\n        //payable\\n        poolRouter.exactInputSingle{value: payAmount}(params);\\n\\n        return (payAmount, block.number);\\n    }\\n    // 0xc07f5c3200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000dcf075580c225b20000000000000000000000009f8a222fd0b75239b32aa8a97c30669e5981db05000000000000000000000000e34f22cf55db5209ba6546701d408e5f58d8703f0000000000000000000000000000000000000000000000000000000000000000\\n    function reFund(\\n        address _sender,\\n        uint reFundAmount\\n    ) external nonReentrant returns (uint, uint) {\\n        require(reFundAmount > 5 ether, \\\"LibPayment: reFundAmount too low\\\");\\n\\n        IPoolRouter poolRouter = IPoolRouter(s.contracts[\\\"pangearouter\\\"]);\\n\\n        IPoolRouter.ExactInputSingleParams memory params = IPoolRouter\\n        // pangearouter 0x17Ac28a29670e637c8a6E1ec32b38fC301303E34\\n        // gc token 0x999999999939ba65abb254339eec0b2a0dac80e9\\n        // gc pool 0x9F8a222Fd0b75239B32Aa8a97C30669E5981dB05\\n            .ExactInputSingleParams({\\n                tokenIn: s.contracts[\\\"gctoken\\\"],\\n                amountIn: reFundAmount,\\n                amountOutMinimum: 10,\\n                pool: s.contracts[\\\"gcpool\\\"],\\n                to: _sender,\\n                unwrap: true\\n            });\\n\\n        poolRouter.exactInputSingle(params);\\n\\n        return (reFundAmount, block.number);\\n    }\\n\\n    function itemBuy(\\n        address _buyer,\\n        uint _itemId,\\n        uint _quantity,\\n        uint _payAmount\\n    ) external nonReentrant returns (uint, uint) {\\n        IERC1155 item = IERC1155(s.contracts[\\\"item\\\"]);\\n        uint itemPrice = s.items[_itemId].price * _quantity;\\n\\n        require(s.items[_itemId].price != 0, \\\"PaymentFacet: item not found\\\");\\n        require(_payAmount >= itemPrice, \\\"PaymentFacet: payAmount too low\\\");\\n\\n        IPoolRouter poolRouter = IPoolRouter(s.contracts[\\\"pangearouter\\\"]);\\n\\n        IPoolRouter.ExactInputSingleParams memory params = IPoolRouter\\n            .ExactInputSingleParams({\\n                tokenIn: s.contracts[\\\"gctoken\\\"],\\n                amountIn: _payAmount,\\n                amountOutMinimum: 10,\\n                pool: s.contracts[\\\"gcpool\\\"],\\n                to: _buyer,\\n                unwrap: true\\n            });\\n\\n        poolRouter.exactInputSingle(params);\\n\\n        item.mint(_buyer, _itemId, _quantity, \\\"0x0\\\");\\n\\n        return (_payAmount, block.number);\\n    }\\n}\\n\",\"keccak256\":\"0xca7acbbe44da1cf86c7d8e450ebbc10bd456e2192a0f426b2aeab6a78405866b\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC1155 {\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address account, uint256 id, uint256 value) external;\\n\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x681af62d301300542b9ebb9e2888763af9a053d3694a467c05700730cd4aceac\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb1f741842fb81b560a48d0f336a76158be014fb7b3814b213a474c21f973a265\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPoolRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice pool router interface.\\ninterface IPoolRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn; /// @dev the input token address. If tokenIn is address(0), msg.value will be wrapped and used as input token\\n        uint256 amountIn; /// @dev The amount of input tokens to send\\n        uint256 amountOutMinimum; /// @dev minimum required amount of output token after swap\\n        address pool; /// @dev pool address to swap\\n        address to; /// @dev address to receive\\n        bool unwrap; /// @dev unwrap if output token is wrapped klay\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn; /// @dev the token address to swap-in. If tokenIn is address(0), msg.value will be wrapped and used as input token\\n        uint256 amountIn; /// @dev The amount of input tokens to send.\\n        uint256 amountOutMinimum; /// @dev minimum required amount of output token after swap\\n        address[] path; /// @dev An array of pool addresses to pass through\\n        address to; /// @dev recipient of the output tokens\\n        bool unwrap; /// @dev unwrap if output token is wrapped klay\\n    }\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn; /// @dev the input token address. If tokenIn is address(0), msg.value will be wrapped and used as input token\\n        uint256 amountOut; /// @dev The amount of output tokens to receive\\n        uint256 amountInMaximum; /// @dev maximum available amount of input token after swap\\n        address pool; /// @dev pool address to swap\\n        address to; /// @dev address to receive\\n        bool unwrap; /// @dev unwrap if output token is wrapped klay\\n    }\\n\\n    struct ExactOutputParams {\\n        address tokenIn; /// @dev the token address to swap-in. If tokenIn is address(0), msg.value will be wrapped and used as input token\\n        uint256 amountOut; /// @dev The amount of output tokens to receive\\n        uint256 amountInMaximum; /// @dev  maximum available amount of input token after swap\\n        address[] path; /// @dev An array of pool addresses to pass through\\n        address to; /// @dev recipient of the output tokens\\n        bool unwrap; /// @dev unwrap if output token is wrapped klay\\n    }\\n\\n    /// @notice Swap amountIn of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as ExactInputSingleParams in calldata\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swap amountIn of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as ExactInputParams in calldata\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as ExactOutputSingleParams in calldata\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as ExactOutputParams in calldata\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    /// @notice Recover mistakenly sent tokens\\n    function sweep(\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xfd0f120615ac739b8f0ebe4d126f0885b78480c4a9bcc1279994b45a7e17e8d9\",\"license\":\"GPL-3.0\"},\"contracts/shared/libraries/LibMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"\\n            )\\n        );\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194f61daa9d3c92ca3de358b76506dbb1e9e39211dc5b49768f18cc38f85b1ab\",\"license\":\"MIT\"},\"contracts/shared/storage/structs/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct User {\\n    string name;\\n    uint tokenId;\\n    //equpiment\\n    //inventory\\n    //stats\\n}\\n\\nstruct Item {\\n    uint itemId;\\n    uint price;\\n}\\n\\nstruct AppStorage {\\n    mapping(string => address) contracts;\\n    mapping(address => User) users;\\n    mapping(uint => Item) items;\\n}\\n\",\"keccak256\":\"0xfb0e1bfce9e764cbccaec67707081f9933a6fadb19ec74eaa6868c2d4adb4670\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055610874806100256000396000f3fe6080604052600436106100345760003560e01c8063a3b544d914610039578063c290d69114610072578063e557498b14610085575b600080fd5b34801561004557600080fd5b5061005961005436600461072d565b6100a5565b6040805192835260208301919091520160405180910390f35b610059610080366004610766565b61038b565b34801561009157600080fd5b506100596100a036600461077f565b610539565b6000806100b06106e7565b604051636974656d60e01b815260009060019060040190815260408051602092819003830190205460008981526003909352908220600101546001600160a01b0390911692506101019087906107a9565b600088815260036020526040812060010154919250036101685760405162461bcd60e51b815260206004820152601c60248201527f5061796d656e7446616365743a206974656d206e6f7420666f756e640000000060448201526064015b60405180910390fd5b808510156101b85760405162461bcd60e51b815260206004820152601f60248201527f5061796d656e7446616365743a20706179416d6f756e7420746f6f206c6f7700604482015260640161015f565b6040516b3830b733b2b0b937baba32b960a11b8152600090600190600c01908152604080519182900360200182205460c08301918290526001600160a01b0316925060009190819060019061021a906633b1ba37b5b2b760c91b815260070190565b9081526040805160209281900383019020546001600160a01b0390811684529183018b9052600a8382015280516519d8dc1bdbdb60d21b815260016006820181905282519182900360260190912054831660608501528e8316608085015260a090930192909252905163603fae1960e11b815291925083169063c07f5c32906102a79084906004016107d4565b6020604051808303816000875af11580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea9190610825565b5060405163731133e960e01b81526001600160a01b038b81166004830152602482018b9052604482018a905260806064830152600360848301526203078360ec1b60a483015285169063731133e99060c401600060405180830381600087803b15801561035657600080fd5b505af115801561036a573d6000803e3d6000fd5b50505050864395509550505050506103826001600055565b94509492505050565b60008067016345785d8a000083116103e55760405162461bcd60e51b815260206004820152601d60248201527f4c69625061796d656e743a20706179416d6f756e7420746f6f206c6f77000000604482015260640161015f565b604080516b3830b733b2b0b937baba32b960a11b81526001600c820152905190819003602c018120546001600160a01b031690309085156108fc029086906000818181858888f19350505050158015610442573d6000803e3d6000fd5b506040805160c0810182526000808252602082018790526103e88284015282516519d8dc1bdbdb60d21b8152600160068201819052845191829003602601909120546001600160a01b03908116606085015284516362616e6b60e01b81526004808201939093528551908190036024019020548116608085015260a0840192909252925163603fae1960e11b815291929084169163c07f5c329188916104ea918691016107d4565b60206040518083038185885af1158015610508573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061052d9190610825565b50939443945092505050565b6000806105446106e7565b674563918244f40000831161059b5760405162461bcd60e51b815260206004820181905260248201527f4c69625061796d656e743a20726546756e64416d6f756e7420746f6f206c6f77604482015260640161015f565b6040516b3830b733b2b0b937baba32b960a11b8152600090600190600c01908152604080519182900360200182205460c08301918290526001600160a01b031692506000919081906001906105fd906633b1ba37b5b2b760c91b815260070190565b9081526040805160209281900383019020546001600160a01b039081168452918301899052600a8382015280516519d8dc1bdbdb60d21b815260016006820181905282519182900360260190912054831660608501528a8316608085015260a090930192909252905163603fae1960e11b815291925083169063c07f5c329061068a9084906004016107d4565b6020604051808303816000875af11580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190610825565b5084439350935050506106e06001600055565b9250929050565b60026000540361070a57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b80356001600160a01b038116811461072857600080fd5b919050565b6000806000806080858703121561074357600080fd5b61074c85610711565b966020860135965060408601359560600135945092505050565b60006020828403121561077857600080fd5b5035919050565b6000806040838503121561079257600080fd5b61079b83610711565b946020939093013593505050565b80820281158282048414176107ce57634e487b7160e01b600052601160045260246000fd5b92915050565b81516001600160a01b03908116825260208084015190830152604080840151908301526060808401518216908301526080808401519091169082015260a09182015115159181019190915260c00190565b60006020828403121561083757600080fd5b505191905056fea2646970667358221220c089b0c84760e17de3869f0eb8773fbe5bcbe251867c8803a2b3bbf54eeb30d664736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c8063a3b544d914610039578063c290d69114610072578063e557498b14610085575b600080fd5b34801561004557600080fd5b5061005961005436600461072d565b6100a5565b6040805192835260208301919091520160405180910390f35b610059610080366004610766565b61038b565b34801561009157600080fd5b506100596100a036600461077f565b610539565b6000806100b06106e7565b604051636974656d60e01b815260009060019060040190815260408051602092819003830190205460008981526003909352908220600101546001600160a01b0390911692506101019087906107a9565b600088815260036020526040812060010154919250036101685760405162461bcd60e51b815260206004820152601c60248201527f5061796d656e7446616365743a206974656d206e6f7420666f756e640000000060448201526064015b60405180910390fd5b808510156101b85760405162461bcd60e51b815260206004820152601f60248201527f5061796d656e7446616365743a20706179416d6f756e7420746f6f206c6f7700604482015260640161015f565b6040516b3830b733b2b0b937baba32b960a11b8152600090600190600c01908152604080519182900360200182205460c08301918290526001600160a01b0316925060009190819060019061021a906633b1ba37b5b2b760c91b815260070190565b9081526040805160209281900383019020546001600160a01b0390811684529183018b9052600a8382015280516519d8dc1bdbdb60d21b815260016006820181905282519182900360260190912054831660608501528e8316608085015260a090930192909252905163603fae1960e11b815291925083169063c07f5c32906102a79084906004016107d4565b6020604051808303816000875af11580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea9190610825565b5060405163731133e960e01b81526001600160a01b038b81166004830152602482018b9052604482018a905260806064830152600360848301526203078360ec1b60a483015285169063731133e99060c401600060405180830381600087803b15801561035657600080fd5b505af115801561036a573d6000803e3d6000fd5b50505050864395509550505050506103826001600055565b94509492505050565b60008067016345785d8a000083116103e55760405162461bcd60e51b815260206004820152601d60248201527f4c69625061796d656e743a20706179416d6f756e7420746f6f206c6f77000000604482015260640161015f565b604080516b3830b733b2b0b937baba32b960a11b81526001600c820152905190819003602c018120546001600160a01b031690309085156108fc029086906000818181858888f19350505050158015610442573d6000803e3d6000fd5b506040805160c0810182526000808252602082018790526103e88284015282516519d8dc1bdbdb60d21b8152600160068201819052845191829003602601909120546001600160a01b03908116606085015284516362616e6b60e01b81526004808201939093528551908190036024019020548116608085015260a0840192909252925163603fae1960e11b815291929084169163c07f5c329188916104ea918691016107d4565b60206040518083038185885af1158015610508573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061052d9190610825565b50939443945092505050565b6000806105446106e7565b674563918244f40000831161059b5760405162461bcd60e51b815260206004820181905260248201527f4c69625061796d656e743a20726546756e64416d6f756e7420746f6f206c6f77604482015260640161015f565b6040516b3830b733b2b0b937baba32b960a11b8152600090600190600c01908152604080519182900360200182205460c08301918290526001600160a01b031692506000919081906001906105fd906633b1ba37b5b2b760c91b815260070190565b9081526040805160209281900383019020546001600160a01b039081168452918301899052600a8382015280516519d8dc1bdbdb60d21b815260016006820181905282519182900360260190912054831660608501528a8316608085015260a090930192909252905163603fae1960e11b815291925083169063c07f5c329061068a9084906004016107d4565b6020604051808303816000875af11580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190610825565b5084439350935050506106e06001600055565b9250929050565b60026000540361070a57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b80356001600160a01b038116811461072857600080fd5b919050565b6000806000806080858703121561074357600080fd5b61074c85610711565b966020860135965060408601359560600135945092505050565b60006020828403121561077857600080fd5b5035919050565b6000806040838503121561079257600080fd5b61079b83610711565b946020939093013593505050565b80820281158282048414176107ce57634e487b7160e01b600052601160045260246000fd5b92915050565b81516001600160a01b03908116825260208084015190830152604080840151908301526060808401518216908301526080808401519091169082015260a09182015115159181019190915260c00190565b60006020828403121561083757600080fd5b505191905056fea2646970667358221220c089b0c84760e17de3869f0eb8773fbe5bcbe251867c8803a2b3bbf54eeb30d664736f6c63430008160033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/openforge/paymentFacet.sol:PaymentFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 86,
        "contract": "contracts/openforge/paymentFacet.sol:PaymentFacet",
        "label": "s",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AppStorage)752_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)732_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)732_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Item)737_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Item)",
        "numberOfBytes": "32",
        "value": "t_struct(Item)737_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)752_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 741,
            "contract": "contracts/openforge/paymentFacet.sol:PaymentFacet",
            "label": "contracts",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_string_memory_ptr,t_address)"
          },
          {
            "astId": 746,
            "contract": "contracts/openforge/paymentFacet.sol:PaymentFacet",
            "label": "users",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(User)732_storage)"
          },
          {
            "astId": 751,
            "contract": "contracts/openforge/paymentFacet.sol:PaymentFacet",
            "label": "items",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Item)737_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Item)737_storage": {
        "encoding": "inplace",
        "label": "struct Item",
        "members": [
          {
            "astId": 734,
            "contract": "contracts/openforge/paymentFacet.sol:PaymentFacet",
            "label": "itemId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 736,
            "contract": "contracts/openforge/paymentFacet.sol:PaymentFacet",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)732_storage": {
        "encoding": "inplace",
        "label": "struct User",
        "members": [
          {
            "astId": 729,
            "contract": "contracts/openforge/paymentFacet.sol:PaymentFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 731,
            "contract": "contracts/openforge/paymentFacet.sol:PaymentFacet",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}