{
  "address": "0x5892b5bbFB4D860555181BCCCA3A99f92142FEFE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "Register_registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Register_userGet",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x581d3966c739a6081dfba58482ab9e66a925a12fd017d92b4e3a9981e1627efb",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x78D851386840d7F70A68F2fBa538f54EBE2A5d8E",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "420910",
    "logsBloom": "0x
    "blockHash": "0x49f11853f9f2d010547d64ab9e5550bd98bdd55205a2513a8cbf1074df9f5885",
    "transactionHash": "0x581d3966c739a6081dfba58482ab9e66a925a12fd017d92b4e3a9981e1627efb",
    "logs": [],
    "blockNumber": 156172390,
    "cumulativeGasUsed": "808669",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6136d9c2cfc718056e7f529232af2c22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"Register_registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Register_userGet\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/originforge/registerFacet.sol\":\"RegisterFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/originforge/registerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AppStorage} from \\\"../shared/storage/structs/AppStorage.sol\\\";\\nimport {IERC721} from \\\"../shared/interfaces/IERC721.sol\\\";\\n\\ncontract RegisterFacet {\\n    AppStorage internal s;\\n\\n    function Register_registerUser(string memory _name) external {\\n        s.users[msg.sender].name = _name;\\n        IERC721 SBT = IERC721(s.contracts[\\\"sbt\\\"]);\\n        uint tokenId = SBT.safeMint(msg.sender, \\\"-\\\");\\n        s.users[msg.sender].tokenId = tokenId;\\n    }\\n\\n    function Register_userGet() external view returns (string memory, uint) {\\n        return (s.users[msg.sender].name, s.users[msg.sender].tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x021cd2b07563692d9f7733db91d45e216c4bb2b81c7aba23ca2f33068fd92904\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n//import \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\n/* interface IERC721 is IERC165 { */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    function burn(uint256 _tokenId) external;\\n\\n    function safeMintByMinter(address _to) external;\\n\\n    function nextTokenId() external view returns (uint256);\\n\\n    function safeMint(address to, string memory uri) external returns (uint);\\n\\n    \\n}\\n\",\"keccak256\":\"0x38d1beb4c8f98536df1c688e437d45a7088ae975230a960e63b898d600e60603\",\"license\":\"MIT\"},\"contracts/shared/storage/structs/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct User {\\n    string name;\\n    uint tokenId;\\n    //equpiment\\n    //inventory\\n    //stats\\n}\\n\\nstruct Item {\\n    uint itemId;\\n    uint price;\\n}\\n\\nstruct AppStorage {\\n    mapping(string => address) contracts;\\n    mapping(address => User) users;\\n    mapping(uint => Item) items;\\n}\\n\",\"keccak256\":\"0xfb0e1bfce9e764cbccaec67707081f9933a6fadb19ec74eaa6868c2d4adb4670\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506104b2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806322df02971461003b57806360781c501461005a575b600080fd5b61004361006f565b6040516100519291906101fc565b60405180910390f35b61006d610068366004610267565b61011f565b005b3360009081526001602081905260408220908101548154606093929190829061009790610318565b80601f01602080910402602001604051908101604052809291908181526020018280546100c390610318565b80156101105780601f106100e557610100808354040283529160200191610110565b820191906000526020600020905b8154815290600101906020018083116100f357829003601f168201915b50505050509150915091509091565b33600090815260016020526040902061013882826103a3565b50604051621cd89d60ea1b815260009081906003019081526040805191829003602001822054636902622f60e11b8352336004840152602483019190915260016044830152602d60f81b60648301526001600160a01b03169150600090829063d204c45e906084016020604051808303816000875af11580156101bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e39190610463565b3360009081526001602081905260409091200155505050565b604081526000835180604084015260005b8181101561022a576020818701810151606086840101520161020d565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561027957600080fd5b813567ffffffffffffffff8082111561029157600080fd5b818401915084601f8301126102a557600080fd5b8135818111156102b7576102b7610251565b604051601f8201601f19908116603f011681019083821181831017156102df576102df610251565b816040528281528760208487010111156102f857600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061032c57607f821691505b60208210810361034c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561039e576000816000526020600020601f850160051c8101602086101561037b5750805b601f850160051c820191505b8181101561039a57828155600101610387565b5050505b505050565b815167ffffffffffffffff8111156103bd576103bd610251565b6103d1816103cb8454610318565b84610352565b602080601f83116001811461040657600084156103ee5750858301515b600019600386901b1c1916600185901b17855561039a565b600085815260208120601f198616915b8281101561043557888601518255948401946001909101908401610416565b50858210156104535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561047557600080fd5b505191905056fea2646970667358221220606b10d5c5ace9cc2b2320a20478dfc3c31ee9e86cd17a41b24eb124bd120fb464736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806322df02971461003b57806360781c501461005a575b600080fd5b61004361006f565b6040516100519291906101fc565b60405180910390f35b61006d610068366004610267565b61011f565b005b3360009081526001602081905260408220908101548154606093929190829061009790610318565b80601f01602080910402602001604051908101604052809291908181526020018280546100c390610318565b80156101105780601f106100e557610100808354040283529160200191610110565b820191906000526020600020905b8154815290600101906020018083116100f357829003601f168201915b50505050509150915091509091565b33600090815260016020526040902061013882826103a3565b50604051621cd89d60ea1b815260009081906003019081526040805191829003602001822054636902622f60e11b8352336004840152602483019190915260016044830152602d60f81b60648301526001600160a01b03169150600090829063d204c45e906084016020604051808303816000875af11580156101bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e39190610463565b3360009081526001602081905260409091200155505050565b604081526000835180604084015260005b8181101561022a576020818701810151606086840101520161020d565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561027957600080fd5b813567ffffffffffffffff8082111561029157600080fd5b818401915084601f8301126102a557600080fd5b8135818111156102b7576102b7610251565b604051601f8201601f19908116603f011681019083821181831017156102df576102df610251565b816040528281528760208487010111156102f857600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061032c57607f821691505b60208210810361034c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561039e576000816000526020600020601f850160051c8101602086101561037b5750805b601f850160051c820191505b8181101561039a57828155600101610387565b5050505b505050565b815167ffffffffffffffff8111156103bd576103bd610251565b6103d1816103cb8454610318565b84610352565b602080601f83116001811461040657600084156103ee5750858301515b600019600386901b1c1916600185901b17855561039a565b600085815260208120601f198616915b8281101561043557888601518255948401946001909101908401610416565b50858210156104535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561047557600080fd5b505191905056fea2646970667358221220606b10d5c5ace9cc2b2320a20478dfc3c31ee9e86cd17a41b24eb124bd120fb464736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13276,
        "contract": "contracts/originforge/registerFacet.sol:RegisterFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)15495_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)15475_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)15475_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Item)15480_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Item)",
        "numberOfBytes": "32",
        "value": "t_struct(Item)15480_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)15495_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 15484,
            "contract": "contracts/originforge/registerFacet.sol:RegisterFacet",
            "label": "contracts",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_string_memory_ptr,t_address)"
          },
          {
            "astId": 15489,
            "contract": "contracts/originforge/registerFacet.sol:RegisterFacet",
            "label": "users",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(User)15475_storage)"
          },
          {
            "astId": 15494,
            "contract": "contracts/originforge/registerFacet.sol:RegisterFacet",
            "label": "items",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Item)15480_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Item)15480_storage": {
        "encoding": "inplace",
        "label": "struct Item",
        "members": [
          {
            "astId": 15477,
            "contract": "contracts/originforge/registerFacet.sol:RegisterFacet",
            "label": "itemId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15479,
            "contract": "contracts/originforge/registerFacet.sol:RegisterFacet",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)15475_storage": {
        "encoding": "inplace",
        "label": "struct User",
        "members": [
          {
            "astId": 15472,
            "contract": "contracts/originforge/registerFacet.sol:RegisterFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 15474,
            "contract": "contracts/originforge/registerFacet.sol:RegisterFacet",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}